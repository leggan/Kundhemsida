@import url('https://fonts.googleapis.com/css2?family=Montserrat:ital,wght@0,100..900;1,100..900&display=swap');

/* VARIABLER SOM KAN NÅS MED: var() */
:root {
    --green: #21a35f;
    --green-hover: #07944B;
    --black: #000000;
    --white: #fff;
    }

/* JAG VILL ATT WIDTH SKA VARA 100% oavsett,
hade likagärna kunnat använda width här.
Samma gäller höjden.
Display: flex; ger mig properties som i detta fall jag använder:
justify-content och align-items,
dessa gör att elementen centreras på x-y axeln.
*/
#hero {
    min-width: 100%;
    min-height: 85vh;
    display: flex;
    justify-content: center;
    align-items: center;
}

/* space-evenly gör att mellanrummet fördelas jämt. */
.hero-content {
    height: 70vh;
    width: 45%;;
    display: flex;
    flex-direction: column;
    justify-content: space-evenly;
    align-items: center;
}

/* Använder vw för jag tycker den ger mig mest korrekta fontsizen,
med korrekta menar jag att den ger mig mest responsivitet.
*/
.hero-content h1 {
    font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
    font-weight: bold;
    font-size: 3.75vw;
    text-align: center;
    width: 100%;
}

/* overflow:hidden,
det gör att allt som hamnar utanför elementet kommer försvinnas/ inte synas.
Förklarar det lite mer vi nästa element
*/
#hero-pic {
    overflow: hidden;
    position: relative;
    height: 70vh;
    width: 45%;
    display: flex;
    justify-content: center;
    align-items: center;
}

/* Här är varför jag ville använda overflow-hidden.

Eftersom img blir en fyrkant även fast själva bilden är rund.
Detta kan man se med hjälpa av borders.
När den sedan roterar kommer hörnen av img hamna utanför #hero-pic.
Om jag inte skulle använda overflow:hidden; skulle 
#hero-pic påverkas och röra på sig/expandera

will-cange: transform; är inte så nödvändig i detta fall,
ville bara testa och möjligtvis se någon skillnad.
Den används ofta vid optimering av hemsidor.
Iallafall så gör den att webbläsaren är "redo" på att
img KAN "röra" sig/ändra sig.

Eftersom webbläsaren är redo blir det inget "lagg"
eller liknande.

Dock ska detta användas som sista lösning.
*/
#hero-pic img {
    will-change: transform;
    width: 100%; 
    max-width: 450px; 
    height: auto;
    transition: all 0.3s ease-in-out;
}

/* Detta är en media querie som gör att bilden är mindre på våra skoldatorer.
Jag gör hemsida både på skoldatorn och hemma,
Skärmen på skoldatorn har en width och height på: 1280x720
Därför blir det lite skillnad när jag gör här hemma.
*/
@media (max-width: 1280px) {
    #hero-pic img {
        max-width: 350px; 
    }
}

/* Detta är animationen av bilden där bilden roteras 360 grader, alltså ett helt varv när man
drar muspekaren över */
#hero-pic img:hover {
    transform: rotate(360deg);
}
/* Man kan använda margin på lite olika sätt.
1. margin: top right bottom left
2. margin: top-bottom right-left

I detta fall så blir margin applicerad på right-left
Det går likagärna bra att använda t.ex
margin-right och margin-left.
Men med denna metod går det lite snabbare
*/
.customers {
    width: 80%;
    height: 10vh;
    display: flex;
    align-items: center;
    margin: 0 10%;
}


.customer {
    position: relative;
    height: 100%;
    width: 8vw;
    display: flex;
    justify-content: center;
    align-items: center;
}
.customers p {
    color: #282828;
    font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
    margin-left: 10%;
    font-size: 1.2vw;
}

/* Här ville jag exprimentera med clamp()
som kan hjälpa med responsivitet av en hemsida.

clamp(minsta värde, optimala (oftast en responsiv enhet), högsta värde)

*/
.customer img {
    position: absolute;
    width: clamp(32px, 3vw, 64px);
    height: auto;
}

/* Här fick jag leka runt lite med position:absolute;
left: 12% gör att den är 12% från vänster.
%-tecknet innebär i detta fallet -> 12% av föräldrarelementets bredd.
I detta fall 12% av 8vw

Z-index handlar om vilket "layer" elementet ska ligga på".

*/
.customer img:nth-of-type(1) {
    z-index: 300;
    position: absolute;
    left: 12%;
}
/* Här ligger detta element över det tidigare eftersom den har högre index */
.customer img:nth-of-type(2) {
    z-index: 301;
    position: absolute;

} 
.customer img:nth-of-type(3) {
    z-index: 301;
    position: absolute;
    right: 12%;
}  


.hero-btns {
    width: 80%;
    height: 10vh;

    padding: 0px 0px;
    display: flex;
    align-items: center;
}

/* Intressantast här är "rem".
Rem är en responsiv "enhet/unit"
och skillnaden mellan "rem" och "em"
är att "rem" går efter root's font-size
medans "em" går för föräldrarelementets font-size.

Rem:
:root {
    font-size=16px
}

font-size=1.2rem

font-size=1.2 * 16px (root's font-size) // detta är hur uträkningen fungerar.

I detta fall gör det inte så jättestor skillnad i responsiviteten.
Helt enkelt skulle jag kunna använda px istället.
Dock säger många att man ska använda mer responsiva units
istället för px.

*/
.hero-btns button {
    padding: 2.5% 4%;
    border-radius: 16px;
    border: none;
    cursor: pointer;
    margin: 0 10px;
    font-size: 1.2rem;
    
}

.hero-btns button:nth-of-type(1) {
    background-color: var(--green);
    color: white;
    transition: all .2s ease-in-out;
}

/* transform: scale(1.05, 1.05) gör 
att elementets width och height gångras med 1.05.
Alltså blir 0.05% större än orginala storleken.

*/
.hero-btns button:nth-of-type(1):hover {
    transform: scale(1.05, 1.05);
    background-color: var(--green-hover);
}


.hero-btns button:nth-of-type(2) {
    background-color: transparent;
    border: 1px solid var(--green);
    color: var(--green);
    transition: all .2s ease-in-out;

}

.hero-btns button:nth-of-type(2):hover {
    transform: scale(1.05, 1.05);
    background-color: var(--green);
    color: var(--white);
}

/* POPULAR DISHES */

.popular-inner-items {
    width: 100%;
    display: flex;
    justify-content: center;
    align-items: center;
    height: 70vh;
}

@media screen and (max-width: 1280px) {
    .popular-inner-items {
        height: 80vh;
    }
}


#arrow {
    width: 10%;
    display: flex;
    justify-content: center;
    align-items: center;
}

/* Cursor gör att muspekarn förändras.
Man kan ändra den till olika.
Pointer gör muspekaren till "hand".
*/
#arrow button {
    width: auto;
    height: auto;
    background-color: transparent;
    cursor: pointer;
    border: none;
}

/* Varför använder jag svg istället för img.
SVG's är oftast mycket mer skalbara utan att ändra kvalite/inte bli suddigt.
Medans images har en bestämd height och width i sin fil.

*/
#arrow button svg {
    fill: var(--green);
    transition: all .2s ease-in-out;
}
#arrow button svg:hover {
    transform: scale(1.2, 1.2);
    fill: var(--green-hover);
}

/* Margin: auto; gör att elementet centreras horizontellt.
    Dock behöver alltid föräldrarelementet en bestämd width.
*/
.popular-dishes {
    position: relative;
    width: 60%;
    height: 80vh;
    display: flex;
    flex-direction: column;
    align-items: center;
    margin: auto;
    position: relative; 
}

@media  screen and (max-width: 1280px) {
    .popular-dishes {
        height: 100vh;
    }
    .popular-inner-items {
        height: 100vh;
    }
}

/* font-size:bold; gör att texten blir fetare.
Annars kan man anänvda siffror som t.ex 500, 600, 700 osv.
Upp till 900 kan finnas.

Som jag förklarade tidigare.
Här är- 
top: 40px
right: 0px
bottom: 60px
left: 0px;

*/
.title-h1 {
    align-self: center;
    font-family: 'Montserrat';
    font-size: 3.95em;
    font-weight: bold;
    margin: 40px 0px 60px 0px;
}
/* max-content är att jag låter elementen innanför bestämda höjden.
Alltså att de får ta så mycket plats som de vill.
Detta för jag inte ska behöva mixtra med höjden om saker inte får plats.
display:none; gör jag så att inte elementet syns.
Varför är för att jag skapar en animation genom javascript i script-filen: "/js/script.js".

*/
.dishes {
    width: 100%;
    height: max-content;
    display: none; 
    justify-content: space-between; 
    align-items: center;
}

/* animation som heter "fade".
    Samt att animationen från start till slut ska ta 1.5 sekunder.
*/
.dishes-active {
    display: flex;
    animation-name: fade;
    animation-duration: 1.5s;
}
/* Här gör jag en animation.
Startvärdet på opacity: ska vara 0.5,
sen efter 1.5 sekunder ska opacity vara 1
Alltså fullt synligt
*/
@keyframes fade {
    from {opacity: .5}
    to {opacity: 1}
}





.dishes-left {
    
    width: 50%;
    height: 100%;
    padding-left: 10px;
    display: flex;
    justify-content: center;
    flex-direction: column;
}

.dishes-left h1 {
    font-size: 2vw;
    margin: 12px 0px;
    font-family: 'Montserrat';
}

.dishes-paragraf {
    width: 80%;
    font-size: 1.1vw;
    margin-bottom: 14px;
    font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
}

.dish-price {
    color: red;
    font-family: 'Montserrat';
    font-size: 1.2em;
    margin-bottom: 8px;
}

.ursprungligen {
    font-family: 'Montserrat';
    color: #282828;
}

/* Gör så att det är en linje genom texten,
A-taggar är t.ex alltid satt till text-decoration:underline;.
Detta kan man ta bort genom att använda text-decoration:none;
*/
.ursprungligen span {
    text-decoration: line-through;
}

.ursprungligen span:nth-of-type(2) {
    color: red;
    margin-left: 10px;
    text-decoration: none;
}

/* Jag vill inte att button ska ha en färg, då jag vill att "svg" 
bara ska synas.

Varför jag just har en knapp där är jag lite fundersam i efterhand.
Därför att knappen i sig uppfyller ingen särskild funktion,
skulle därmed kunna använda bara en <a> tag.

Dock är <button> ett semantisk element.
Förklarar semantiska element i HTML.
*/
#add-button {
    margin: 12px 0px;
    border-radius: 50%;
    width: 48px;
    height: 48px;
    border: none;
    background-color: transparent;
    cursor: pointer;
}

#add-icon {
    fill: var(--green);
    transition: all .3s ease-in-out;
}

#add-icon:hover {
    transform: scale(1.1, 1.1);
    fill: var(--green-hover);
}
.dishes-right {
    
    width: 50%;
    height: 100%;
    display: flex;
    justify-content: center;
    align-items: center;
}
.dishes-right img{
    
    max-width: 320px;
    height: auto;
}


.carousel-inner {
    width: 100%;
    height: 5vh;
    display: flex;
    justify-content: center;
    align-items: center;
}

.item {
    border: 1px solid #777;
    border-radius: 50%;
    background-color: transparent;
    width: 16px;
    height: 16px;
    margin: 0px 10px;
}

.active {
    background-color: #07944B;
    width: 24px;
    height: 24px;
}

.location {
    height: 120vh;
    width: 100%;
    display: flex;
    align-items: center;
    flex-direction: column;
}

.location h1 {
    margin: 30px 0px 15px 0px;
    display: flex;
    justify-content: center;
    align-items: center;
    font-size: 3.5em;
    font-family: 'Montserrat';
}
/* Här använder jag display:grid; 
Detta gör jag för att få tillgång till de andra två elementen.

grid-template-columns: repeat(3, 1fr); =>
gör att den skapar 3st kolumner.
1fr gör att alla kolumner är lika stora/fördelas jämt av föräldrarelementets width.
Man hade annars kunnat skrivit såhär:
grid-template-columns: 1fr 1fr 1fr;
Detta innebär samma sak.

Och detta gäller samma sak då för     grid-template-rows: repeat(2, 1fr);
bara att den skapar två rader.




*/
.location-grid {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    grid-template-rows: repeat(2, 1fr);
    margin: auto;
    gap: 30px;
}
.card {
    max-width: 450px;
    max-height: 400px;
    background-color: white;
    border: 1px solid #e5e7eb;
    border-radius: 10px;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
}


/* Bildstil */
.card-image {
    width: 100%;
    height: 400px;
    object-fit: cover;
}
/* 
Här ändrar jag lite storlekar så att 
den blir mer anpassad för mindre skrämar.

*/
@media screen and (max-width: 1280px) {
    .location {
        height: 180vh;
    }
    .card {
        max-width: 300px;
        max-height: 300px;
    }
    .card-image {
        width: 100%;
        height: 300px;
    }


}
.fig-card {
    position: relative;
}

/* Fig-caption är ett semantisk element.
Semantisk element menas med att elementet kan läsas av
webbläsaren.

T.ex:
Om jag skulle ha en <div class"om-mig"></div>
skulle detta vara svårt för webbläsaren att tolka.

I detta fall kanske man skulle använda <section></section>
beroende på hur innehållet är strukturerat.

Iallafall så förstår webbläsaren innebördet av <section></section>,
alltså att det är en större sektion på hemsidan.

Semantiska element brukar oftast använda inom SEO-anpassning för hemsidor.
Vilket kanske inte behövs just nu men alltid roligt att lära något nytt.

SEO fungerar såhär: 
I princip har alla sökmotorer olika typer av botar som
går igenom hela internet för att leta efter hemsidor och information.
Dessa botar kan förstå semantiska element, och desto mer innehåll
du har som de faktiskt kan förstå kan din sida rankas högre i en sökmotor.
Med att rankas högre menar jag att hemsidan kan koppa upp som ett sökresultat tillslut.
Det finns mycket mer för SEO-anpassning men detta är bara ett exempel.

Detta gäller då alla element som:
<figure></figure> => Används oftast för att rama in bilder/innehåll från hemsidan.
<picture></picture> => Webbläsaren förstår att det är en bild
<figcaption></figcaption> => Tillhör <figure> och somsagt en ytterligare text, i mitt fall
plats.

*/

figcaption {
    align-items: flex-end;
    bottom: 10px;
    display: flex;
    left: 10px;
    position: absolute;
    right: 0;
    top: 0;
}

.fig-span {
    color: var(--white);
    background-color: var(--green);
    padding: 12px 16px;
    border-radius: 12px;
    font-family: 'Montserrat';
    transition: all .3s ease-in-out;
    cursor: pointer;
    margin-bottom: 10px;
}

.fig-span:hover {
    transform: scale(1.1, 1.1);
    background-color: var(--green-hover);
} 

#button-group {
    width: 100%;
    height: 50vh;
    padding: 0px 0px;
    display: flex;
    align-items: center;
    justify-content: center;
    border: 1px solid blue;
}

#button-group button {
    padding: 2.5% 4%;
    border-radius: 16px;
    border: none;
    cursor: pointer;
    margin: 0 10px;
    font-size: 1.2rem;
}
/* CONTENT SECTION */
/* CONTENT SECTION */
/* CONTENT SECTION */

.container-section {
    background-color: #ffffff;
    padding: 50px;
    max-width: 1200px;
    margin: auto;
}


.content {
    display: flex;
    flex-wrap: wrap;
    align-items: center;
    gap: 20px;
}
.text {
    flex: 1;
    color: #555;
}
.text h2 {
    font-family: 'Montserrat';
    font-size: 3em;
    color: #222;
    transition: all .3s ease-in-out;
}
.text h2 span {
    color: var(--green);
}

.text h2 span:hover {
    color: var(--green-hover);
}
.text p {
    font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
    margin-bottom: 1.3em;
    line-height: 1.6;
    font-size: 1.2em;
}


/* Denna sektionen var nog det svåraste,
eftersom den var lite mer komplexare,
förklarar mer utförligt nedanför.
*/


.images {
    display: flex;
    position: relative;
}


.image-btn {
    position: relative;
    display: flex;
    align-items: flex-end;
    background-color: transparent;
    z-index: 9999;
}




/* 
Det som är märkvärdigt är hur jag får elementet jag vill.
Jag får element positionerat med hjälp av position: absolute;
Jag vill få elementet centrerat horizontelt.

Då använder jag left: 50%:
Det är samma sak som left: 1px;
Eftersom 100% av föräldrarelementet är 2px
transform: translate(-50%) => Då flyttar vi tillbaks 50% av elementet (Notera, inte föräldrarelement)


*/
.image-btn a {
    border: none;
    position: absolute;
    padding: 16px 40px;
    bottom: 0;
    left: 50%;
    transform: translate(-50%);
    border-radius: 20px;
    font-size: 1em;
    border-radius: 12px;
    border: none;
    background-color: var(--green);
    color: var(--white);
    font-family: 'Montserrat';
    cursor: pointer;
    text-decoration: none;
    transition: all .3s ease-in-out;
}
/* 
    Denna animationen var lite svår att göra.
    När jag hoverar så ökar storleken av elementet, width och height med hjälp av scale.
    Jag ökar padding då jag vill att elementet ska bli större.
    Jag insåg att elementet inte täckte helt nedaför så jag 
    "drar ner" elementet 10px.
    jag satt båda hörnen högst upp till border-radius: 0;

*/
.image-btn:hover a {
    transform: scale(1.05, 1.05);
    padding:30px 212px;
    bottom: -10px;
    left: 50%;
    transform: translate(-50%);
    border-top-right-radius: 0;
    border-top-left-radius: 0;
    font-size: 1.5em;
}
/* Dessa är tagna från "http://css-shape.com/inverted-radius/" */
.image {
    width: 250px;
    height: 400px;
    border-radius: 8px;
    transition: all .3s ease-in-out;   
    overflow: hidden;
    z-index: 88;
    --r: 20px; /* the radius */
    --s: 30px; /* size of inner curve */
    --x: 20px; /* horizontal offset (no percentane) */
    --y: 10px; /* vertical offset (no percentage) */
    
    aspect-ratio: 1;
    background: #3FB8AF;
    border-radius: var(--r);
    --_m:/calc(2*var(--r)) calc(2*var(--r)) radial-gradient(#000 70%,#0000 72%);
    --_g:conic-gradient(from 90deg at calc(100% - var(--r)) calc(100% - var(--r)),#0000 25%,#000 0);
    --_d:(var(--s) + var(--r));
    mask:
      calc(100% - var(--_d) - var(--x)) 100% var(--_m),
      100% calc(100% - var(--_d) - var(--y)) var(--_m),
      radial-gradient(var(--s) at 100% 100%,#0000 99%,#000 calc(100% + 1px)) 
       calc(-1*var(--r) - var(--x)) calc(-1*var(--r) - var(--y)),
      var(--_g) calc(-1*var(--_d) - var(--x)) 0,
      var(--_g) 0 calc(-1*var(--_d) - var(--y));
    mask-repeat: no-repeat;
  
}





.image:nth-of-type(3) {
    --r: 20px; /* the radius */
    --s: 30px; /* size of inner curve */
    --x: 20px; /* horizontal offset (no percentage) */
    --y: 10px; /* vertical offset (no percentage) */
    
    width: 250px;
    aspect-ratio: 1;
    background: #3FB8AF;
    border-radius: var(--r);
    --_m:/calc(2*var(--r)) calc(2*var(--r)) radial-gradient(#000 70%,#0000 72%);
    --_g:conic-gradient(from 180deg at var(--r) calc(100% - var(--r)),#0000 25%,#000 0);
    --_d:(var(--s) + var(--r));
    mask:
      calc(var(--_d) + var(--x)) 100% var(--_m),
      0 calc(100% - var(--_d) - var(--y)) var(--_m),
      radial-gradient(var(--s) at 0 100%,#0000 99%,#000 calc(100% + 1px)) 
       calc(var(--r) + var(--x)) calc(-1*var(--r) - var(--y)),
      var(--_g) calc(var(--_d) + var(--x)) 0,
      var(--_g) 0 calc(-1*var(--_d) - var(--y));
    mask-repeat: no-repeat;
  
}


.image img {
    width: 100%;
    height: 400px;
    border-radius: 8px;
    object-fit: cover;
    transition: all .3s ease-in-out;
}

.image:hover img{
    transform: scale(1.05, 1.05);
}

.images img:nth-of-type(2) {
    height: 300px;
}

/* FOOTER */
.footer {
    background-color: #fff;
    color: #333;
    padding: 40px 20px;
    text-align: center;
    border-top: 1px solid #ddd;
}

.container {
    max-width: 1700px;
    margin: auto;
}

/* Anpassning av footer på skoldatorskärmar */
@media screen and (max-width: 1280px) {
    .container {
        max-width: 1200px;
    }
}

/* Flex-wrap: wrap; gör att element flyttas ner
om de inte får plats.

Standard för detta är flex-wrap: nowrap;
Här vill jag också förklara varför det inte är bra att inte sätta en specifik höjd på detta
element samt föräldrar elementet.
Om jag skulle sätta en bestämd height skulle inte flex-wrap fungera som förväntat.
Höjden i detta fall skulle förstöra strukturen då, exempel nu:

.footer-top {
    height: 50vh; <-------------
    display: flex;
    justify-content: space-between;
    flex-wrap: wrap;
    margin-bottom: 20px;
} 

Då skulle höjden vara 50vh även fast ett element flyttas ner.
Som standard blir elementent samma höjd som elementen innanför totalt.

*/
.footer-top {
    display: flex;
    justify-content: space-between;
    flex-wrap: wrap;
    margin-bottom: 20px;
}
.logo {
    justify-content: center;
}

.logo a {
    display: flex;
    align-items: center;
    text-decoration: none;
    font-family: 'Montserrat';
    color: #000000;
}
.logo img {
    height: 200px;
}


.logo span {
    font-size: 20px;
    font-weight: bold;
    text-decoration: none;
}

.links {
    display: flex;
    gap: 40px;
}

.link-group h2 {
    font-size: 1.5rem;
    font-weight: bold;
    text-transform: uppercase;
    margin-bottom: 10px;
    font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
}

.link-group ul {
    list-style: none;
    padding: 0;
}

.link-group ul li {
    margin-bottom: 8px;
}

.link-group ul li a {
    color: #555;
    text-decoration: none;
    transition: color 0.3s;
    font-size: 1.2em;
}

.link-group ul li a:hover {
    color: #000;
}

hr {
    border: none;
    height: 1px;
    background-color: #ddd;
    margin: 20px 0;
}

.footer-bottom {
    display: flex;
    justify-content: space-between;
    flex-wrap: wrap;
    font-size: 14px;
}

.social-icons {
    display: flex;
    gap: 10px;
}

.icon {
    width: 30px;
    height: 30px;
    background-color: #ddd;
    color: #333;
    text-align: center;
    line-height: 30px;
    border-radius: 50%;
    text-decoration: none;
    font-weight: bold;
    transition: background-color 0.3s;
}

.icon:hover {
    background-color: #555;
    color: #fff;
}
